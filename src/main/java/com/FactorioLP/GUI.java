package com.FactorioLP;

import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.intellijthemes.FlatNordIJTheme;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.JToolBar;
import javax.swing.SpinnerNumberModel;
import javax.swing.UIManager;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.StyleContext;
public class GUI
{
	static List<String> itemConstraintsText = new ArrayList<>();
	static List<String> supplyConstraintsText = new ArrayList<>();
	static List<String> targetConstraintsText = new ArrayList<>();
	static List<String> productionConstraintsText = new ArrayList<>();
	static List<String> sourceText = new ArrayList<>();
	static List<String> solutionText = new ArrayList<>();
	static List<String> spmText = new ArrayList<>();
	static ArrayList<Object[]> solutionMatrix = new ArrayList<>();
	private JPanel panelMain;
	private JTextPane paneOutput1;
	private JTextPane paneItemConstraints;
	private JTextPane paneSupplyConstraints;
	private JTextPane paneSPM;
	private JTextPane paneSources;
	private JTextPane paneTargets;
	private JButton buttonSolve;
	private JSplitPane splitPaneSPM;
	private JTextPane paneProductionConstraints;
	private JPanel panelItemList;
	private JTable table1;
	private JButton button1;
	private JButton button2;
	private JSpinner spinner1;
	private JScrollPane scrollPaneItemList;

	public GUI()
	{
		$$$setupUI$$$();
		makeCheckBoxes();
		makeSolveButton();
		spinner1.addChangeListener(ChangeListener -> {
			int value = (int) spinner1.getValue();
			spinner1.setValue(value);
			System.out.println(value);
		});
	}

	public static void main(String[] args)
	{
		try
		{
			FlatNordIJTheme.setup();
		}
		catch (Exception ex)
		{
			System.err.println("Failed to initialize LaF");
		}

		JFrame frame = new JFrame("GUI");
		frame.setContentPane(new GUI().panelMain);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.pack();
		frame.setVisible(true);
	}

	public static void updateTextStrings(List<String>[] arr)
	{
		itemConstraintsText = arr[0];
		supplyConstraintsText = arr[1];
		targetConstraintsText = arr[2];
		productionConstraintsText = arr[3];
		spmText = arr[4];
	}

	public static void updateSolutionMatrix(ArrayList<Object[]> arr)
	{
		solutionMatrix = arr;
	}

	private void makeSolveButton()
	{
		buttonSolve.setEnabled(false);
		buttonSolve.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseClicked(MouseEvent e)
			{
				super.mouseClicked(e);
				if (buttonSolve.isEnabled())
				{
					Solver.main(new String[0]);
				}
				updateSolutionPanes();
			}
		});
	}

	private void updateConstraintPanes()
	{
		Solver.main(new String[] {"false"});
		setPaneText(paneItemConstraints, itemConstraintsText);
		setPaneText(paneSupplyConstraints, supplyConstraintsText);
		setPaneText(paneProductionConstraints, productionConstraintsText);
		panelMain.revalidate();
	}

	private void updateSolutionPanes()
	{
		setPaneText(paneSPM, spmText);

		DefaultTableModel model = (DefaultTableModel) table1.getModel();
		model.setNumRows(0);
		for (Object[] o : solutionMatrix)
		{
			model.addRow(o);
		}

		panelMain.revalidate();
	}

	private void setPaneText(JTextPane pane, List<String> textList)
	{
		pane.setText(String.join("\n", textList));
		pane.setCaretPosition(0);
	}

	private void makeCheckBoxes()
	{
		for (Item item : Item.values())
		{
			JCheckBox checkBox = new JCheckBox(item.getName());
			checkBox.setSelected(false);
			panelItemList.add(checkBox);
			checkBox.addActionListener(e -> {
				if (checkBox.isSelected())
				{
					Solver.Targets.add(item);
				}
				else
				{
					Solver.Targets.remove(item);
				}
				buttonSolve.setEnabled(Solver.Targets.size() > 0);
				updateConstraintPanes();
			});
		}

		panelItemList.setLayout(new BoxLayout(panelItemList, BoxLayout.Y_AXIS));
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this
	 * method OR
	 * call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$()
	{
		createUIComponents();
		panelMain = new JPanel();
		panelMain.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
		Font panelMainFont = UIManager.getFont("TextPane.font");
		if (panelMainFont != null)
		{
			panelMain.setFont(panelMainFont);
		}
		final JToolBar toolBar1 = new JToolBar();
		toolBar1.setBorderPainted(true);
		toolBar1.setEnabled(true);
		toolBar1.setFloatable(false);
		panelMain.add(toolBar1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,
				GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false
		));
		toolBar1.setBorder(
				BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), "FactorioLP",
						TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION,
						this.$$$getFont$$$("Inter", -1, 16, toolBar1.getFont()), null
				));
		final JSplitPane splitPane1 = new JSplitPane();
		splitPane1.setContinuousLayout(true);
		splitPane1.setDividerLocation(250);
		splitPane1.setDividerSize(0);
		splitPane1.setEnabled(false);
		splitPane1.setOneTouchExpandable(false);
		panelMain.add(splitPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_BOTH,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
				new Dimension(400, 400), null, null, 1, false
		));
		splitPane1.setBorder(
				BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null,
						TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null,
						null
				));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
		splitPane1.setRightComponent(panel1);
		panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLoweredBevelBorder(),
				"Solution", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION,
				null,
				null
		));
		splitPaneSPM = new JSplitPane();
		splitPaneSPM.setDividerLocation(140);
		splitPaneSPM.setDividerSize(0);
		splitPaneSPM.setEnabled(false);
		splitPaneSPM.setOneTouchExpandable(false);
		splitPaneSPM.setOrientation(1);
		splitPaneSPM.setResizeWeight(0.0);
		panel1.add(splitPaneSPM, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1,
				null, new Dimension(250, -1), new Dimension(250, -1), 0, false
		));
		final JLabel label1 = new JLabel();
		label1.setHorizontalAlignment(0);
		label1.setHorizontalTextPosition(0);
		label1.setText("Targets per minute:");
		label1.setVerticalAlignment(0);
		splitPaneSPM.setLeftComponent(label1);
		paneSPM = new JTextPane();
		paneSPM.setEditable(false);
		splitPaneSPM.setRightComponent(paneSPM);
		final JScrollPane scrollPane1 = new JScrollPane();
		panel1.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_BOTH,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null,
				null, null, 0, false
		));
		scrollPane1.setBorder(
				BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null,
						TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null,
						null
				));
		table1.setAutoCreateRowSorter(true);
		table1.setAutoResizeMode(1);
		table1.setEnabled(false);
		scrollPane1.setViewportView(table1);
		buttonSolve = new JButton();
		buttonSolve.setHorizontalAlignment(0);
		buttonSolve.setText("Solve");
		buttonSolve.setMnemonic('S');
		buttonSolve.setDisplayedMnemonicIndex(0);
		panel1.add(buttonSolve, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_EAST,
				GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1),
				new Dimension(100, -1), 0, false
		));
		final JTabbedPane tabbedPane1 = new JTabbedPane();
		tabbedPane1.setTabLayoutPolicy(0);
		splitPane1.setLeftComponent(tabbedPane1);
		scrollPaneItemList = new JScrollPane();
		scrollPaneItemList.setHorizontalScrollBarPolicy(30);
		scrollPaneItemList.setVerticalScrollBarPolicy(20);
		tabbedPane1.addTab("Targets", scrollPaneItemList);
		panelItemList = new JPanel();
		panelItemList.setLayout(new GridBagLayout());
		panelItemList.setMaximumSize(new Dimension(2147483647, 2147483647));
		panelItemList.setMinimumSize(new Dimension(0, 250));
		scrollPaneItemList.setViewportView(panelItemList);
		panelItemList.setBorder(
				BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null,
						TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null,
						null
				));
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
		tabbedPane1.addTab("Supply", panel2);
		final JScrollPane scrollPane2 = new JScrollPane();
		panel2.add(scrollPane2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_BOTH,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null,
				null, null, 0, false
		));
		scrollPane2.setBorder(
				BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null,
						TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null,
						null
				));
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
		scrollPane2.setViewportView(panel3);
		panel3.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null,
				TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null
		));
		final JSplitPane splitPane2 = new JSplitPane();
		splitPane2.setDividerLocation(117);
		splitPane2.setDividerSize(0);
		splitPane2.setEnabled(false);
		splitPane2.setResizeWeight(0.9);
		panel3.add(splitPane2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null,
				null, null, 0, false
		));
		final JLabel label2 = new JLabel();
		label2.setText("Iron Plates");
		splitPane2.setLeftComponent(label2);
		splitPane2.setRightComponent(spinner1);
		final Spacer spacer1 = new Spacer();
		panel3.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null,
				null, 0, false
		));
		final JSplitPane splitPane3 = new JSplitPane();
		splitPane3.setResizeWeight(0.0);
		panel2.add(splitPane3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_SOUTH,
				GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null,
				null, null, 0, false
		));
		button1 = new JButton();
		button1.setHorizontalAlignment(0);
		button1.setText("Button");
		splitPane3.setLeftComponent(button1);
		button2 = new JButton();
		button2.setText("Button");
		splitPane3.setRightComponent(button2);
		final JPanel panel4 = new JPanel();
		panel4.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
		panelMain.add(panel4, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_BOTH,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null,
				new Dimension(-1, 400), null, 1, false
		));
		final JScrollPane scrollPane3 = new JScrollPane();
		panel4.add(scrollPane3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_BOTH,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null,
				null, null, 0, false
		));
		scrollPane3.setBorder(BorderFactory.createTitledBorder(null, "Item Constraints",
				TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null
		));
		paneItemConstraints = new JTextPane();
		paneItemConstraints.setEditable(false);
		Font paneItemConstraintsFont = this.$$$getFont$$$("Iosevka", -1, 12,
				paneItemConstraints.getFont()
		);
		if (paneItemConstraintsFont != null)
		{
			paneItemConstraints.setFont(paneItemConstraintsFont);
		}
		paneItemConstraints.setText("");
		scrollPane3.setViewportView(paneItemConstraints);
		final JScrollPane scrollPane4 = new JScrollPane();
		panel4.add(scrollPane4, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_BOTH,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null,
				null, null, 0, false
		));
		scrollPane4.setBorder(BorderFactory.createTitledBorder(null, "Production Constraints",
				TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null
		));
		paneProductionConstraints = new JTextPane();
		paneProductionConstraints.setEditable(false);
		Font paneProductionConstraintsFont = this.$$$getFont$$$("Iosevka", -1, 12,
				paneProductionConstraints.getFont()
		);
		if (paneProductionConstraintsFont != null)
		{
			paneProductionConstraints.setFont(paneProductionConstraintsFont);
		}
		scrollPane4.setViewportView(paneProductionConstraints);
		final JScrollPane scrollPane5 = new JScrollPane();
		panel4.add(scrollPane5, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_BOTH,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null,
				null, null, 0, false
		));
		scrollPane5.setBorder(BorderFactory.createTitledBorder(null, "Supply Constraints",
				TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null
		));
		paneSupplyConstraints = new JTextPane();
		paneSupplyConstraints.setEditable(false);
		Font paneSupplyConstraintsFont = this.$$$getFont$$$("Iosevka", -1, 12,
				paneSupplyConstraints.getFont()
		);
		if (paneSupplyConstraintsFont != null)
		{
			paneSupplyConstraints.setFont(paneSupplyConstraintsFont);
		}
		scrollPane5.setViewportView(paneSupplyConstraints);
		label1.setLabelFor(paneSPM);
	}

	/**
	 * @noinspection ALL
	 */
	private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont)
	{
		if (currentFont == null)
		{
			return null;
		}
		String resultName;
		if (fontName == null)
		{
			resultName = currentFont.getName();
		}
		else
		{
			Font testFont = new Font(fontName, Font.PLAIN, 10);
			if (testFont.canDisplay('a') && testFont.canDisplay('1'))
			{
				resultName = fontName;
			}
			else
			{
				resultName = currentFont.getName();
			}
		}
		Font font = new Font(
				resultName, style >= 0 ? style : currentFont.getStyle(),
				size >= 0 ? size : currentFont.getSize()
		);
		boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH)
				.startsWith("mac");
		Font fontWithFallback = isMac ? new Font(
				font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(
				font.getFamily(), font.getStyle(), font.getSize());
		return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(
				fontWithFallback);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$()
	{
		return panelMain;
	}

	private void createUIComponents()
	{
		// create solution pane
		String[] columnNames = {"Item", "# of Producers", "Units per Minute"};
		DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);
		table1 = new JTable(tableModel);

		// create supply spinners
		SpinnerNumberModel spinnerModel = new SpinnerNumberModel(1, 0, 999, 1);
		spinner1 = new JSpinner(spinnerModel);
	}
}
